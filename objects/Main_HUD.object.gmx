<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Ori Health Bar
margin_x=64;
margin_y=26;
word_scale=0.8;
display_scale=0.8;
draw_sprite_ext(spr_PlayerHealthDisplay, 0, margin_x, margin_y, display_scale, display_scale, image_angle, image_blend, image_alpha);
draw_sprite_ext(spr_Ori_Icon, 0, margin_x, margin_y, display_scale, display_scale, image_angle, image_blend, image_alpha);

//draw health text
    
if (instance_exists(Player_inbattle)){
    hp=Player_inbattle.hp;
    maxhp=Player_inbattle.maxhp;
    draw_set_halign(fa_left);
    draw_set_colour(c_black);
    draw_text_transformed(margin_x+120,margin_y+26,"HP: ",word_scale,word_scale,image_angle);
    ww1=string_width("HP: ")*word_scale;
    if (hp&lt;0.25*maxhp) {draw_set_colour(c_red);}
    draw_text_transformed(margin_x+120+ww1,margin_y+26,string(hp),word_scale,word_scale,image_angle);
    ww2=string_width(string(hp))*word_scale;
    draw_set_colour(c_black);
    draw_text_transformed(margin_x+120+ww1+ww2,margin_y+26,"/"+string(maxhp),word_scale,word_scale,image_angle);
    
//draw health bar
    pc=(hp/maxhp)*100;
    health_length=maxhp*2;
    if(health_length&gt;160){health_length=160;}
    draw_healthbar(margin_x+120, margin_y+41, margin_x+120+health_length, margin_y+49, pc, c_black, c_red, c_red, 0, false, false)
    
    //draw SE text
    if (Player_inbattle.max_soul_energy&gt;0) {
        soul_energy=Player_inbattle.soul_energy;
        max_soul_energy=Player_inbattle.max_soul_energy;
        draw_set_colour(c_black);
        draw_text_transformed(margin_x+120,margin_y+56,"Soul Energy: ",word_scale,word_scale,image_angle);
        ww1=string_width("Soul Energy: ")*word_scale;
        if (soul_energy&gt;=30) {draw_set_colour(c_blue);}
        draw_text_transformed(margin_x+120+ww1,margin_y+56,string(soul_energy),word_scale,word_scale,image_angle);
        ww2=string_width(string(soul_energy))*word_scale;
        draw_set_colour(c_black);
        draw_text_transformed(margin_x+120+ww1+ww2,margin_y+56,"/"+string(max_soul_energy),word_scale,word_scale,image_angle);
        
    //draw SE bar
        pc=(soul_energy/max_soul_energy)*100;
        SE_length=max_soul_energy*1;
        if(SE_length&gt;185){SE_length=185;}
        draw_healthbar(margin_x+120, margin_y+71, margin_x+120+SE_length, margin_y+79, pc, c_black, c_blue, c_blue, 0, false, false)
        
    //draw soul crystal
        soul_crystal=Player_inbattle.soul_crystal
        for (i=1; i&lt;=soul_crystal; i+=1) {
            crystal_location[i]=Game_Control.crystal_location[i];
        }
        for (i = 1; i &lt;= soul_crystal; i += 1) {
            if (soul_energy&gt;=crystal_location[i]) {
                draw_sprite(spr_Soul_Crystal,i*2-1,margin_x+120+crystal_location[i],margin_y+80);
            }
            else {
                draw_sprite(spr_Soul_Crystal,i*2-2,margin_x+120+crystal_location[i],margin_y+80);
            }
        }
    }
}

//Enem Health Bar
enemy=global.enemy
enemy_icon=enemy.icon
HUD_color=enemy.HUD_color
starting_x=display_get_gui_width()-margin_x;
starting_y=margin_y;
draw_sprite_ext(spr_EnemyHealthDisplay, 0, starting_x, starting_y, display_scale, display_scale, image_angle, HUD_color, image_alpha);
draw_sprite_ext(enemy_icon, 0, starting_x, starting_y, display_scale, display_scale, image_angle, image_blend, image_alpha);

//draw health text
if (instance_exists(enemy)){
    draw_set_halign(fa_right);
    draw_set_colour(c_black);
    draw_text_transformed(display_get_gui_width()-margin_x-120,margin_y+26,"/"+string(enemy.maxhp),word_scale,word_scale,image_angle);
    ww1=string_width("/"+string(enemy.maxhp))*word_scale;
    if (enemy.hp&lt;0.25*enemy.maxhp) {draw_set_colour(c_red);}
    draw_text_transformed(display_get_gui_width()-margin_x-120-ww1,margin_y+26,string(enemy.hp),word_scale,word_scale,image_angle);
    ww2=string_width(string(enemy.hp))*word_scale;
    draw_set_colour(c_black);
    draw_text_transformed(display_get_gui_width()-margin_x-120-ww1-ww2,margin_y+26,"HP: ",word_scale,word_scale,image_angle);
    
//draw health bar
    pc=(enemy.hp/enemy.maxhp)*100;
    health_length=enemy.maxhp*2;
    if(health_length&gt;185){health_length=185;}
    draw_healthbar(display_get_gui_width()-margin_x-120, margin_y+41, display_get_gui_width()-margin_x-120-health_length, margin_y+49, pc, c_black, c_red, c_red, 0, false, false)
    
//draw SE text
    if (enemy.max_dark_energy&gt;0) {
        draw_set_colour(c_black);
        draw_text_transformed(display_get_gui_width()-margin_x-120,margin_y+56,"/"+string(enemy.max_dark_energy),word_scale,word_scale,image_angle);
        ww1=string_width("/"+string(enemy.max_dark_energy))*word_scale;
        if (enemy.dark_energy==0) {draw_set_colour(c_blue);}
        draw_text_transformed(display_get_gui_width()-margin_x-120-ww1,margin_y+56,string(enemy.dark_energy),word_scale,word_scale,image_angle);
        ww2=string_width(string(enemy.dark_energy))*word_scale;
        draw_set_colour(c_black);
        draw_text_transformed(display_get_gui_width()-margin_x-120-ww1-ww2,margin_y+56,"Dark Energy: ",word_scale,word_scale,image_angle);
        
    //draw SE bar
        pc=(enemy.dark_energy/enemy.max_dark_energy)*100;
        SE_length=enemy.max_dark_energy*1;
        if(SE_length&gt;185){SE_length=185;}
        draw_healthbar(display_get_gui_width()-margin_x-120, margin_y+71, display_get_gui_width()-margin_x-120-SE_length, margin_y+79, pc, HUD_color, c_black, c_black, 0, true, false)
        
    //draw dark marks
        dark_mark=enemy.dark_mark;
        for (i=1; i&lt;=dark_mark; i+=1) {
            dark_mark_location[i]=enemy.dark_mark_location[i];
        }
        for (i = 1; i &lt;= dark_mark; i += 1) {
            if (enemy.dark_energy&gt;=dark_mark_location[i]) {
                draw_sprite(spr_dark_mark,1,display_get_gui_width()-margin_x-120-dark_mark_location[i],margin_y+80);
            }
            else {
                draw_sprite(spr_dark_mark,0,display_get_gui_width()-margin_x-120-dark_mark_location[i],margin_y+80);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
